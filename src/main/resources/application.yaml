spring:
  session:
    jdbc:
      initialize-schema: always
      table-name: SPRING_SESSION
      schema:
        - classpath:session_tables.sql
  datasource:
    url: jdbc:postgresql://localhost:5432/instagram
    username: postgres
    password: ${dbSecret}
    driver-class-name: org.postgresql.Driver
  jpa:
    generate-ddl: true
    database: postgresql
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        jdbc:
          lob:
            non_contextual_creation: true
  security:
    oauth2:
      resource:
        preferTokenInfo: true
      client:
        clientAuthenticationScheme: form
        registration:
          google:
            clientId: 362934420937-9idtptlgvi1qnfhj6m4ugsndl77lolr8.apps.googleusercontent.com
            clientSecret: ${googleClientSecret}
            redirectUri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope:
              - openid
              - email
              - profile
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
app:
  auth:
    tokenSecret: 51655368566D597133743677397A24432646294A404E635266556A576E5A7234
    tokenExpirationMsec: 864000000
  cors:
    allowedOrigins: http://localhost:3000 # Comma separated list of allowed origins
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:3000/oauth2/redirect
      - myandroidapp://oauth2/redirect
      - myiosapp://oauth2/redirect
upload:
  path: D:\instagram
